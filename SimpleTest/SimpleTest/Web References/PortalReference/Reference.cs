//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18408
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18408。
// 
#pragma warning disable 1591

namespace SimpleTest.PortalReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsAppFunctionsSoap", Namespace="http://tempuri.org/")]
    public partial class wsAppFunctions : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadApplicationByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNewApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserGroupPermissionApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsHasPermissionUseAPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAIDbyAPCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback isAPCodeUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNewFunClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadFunctionByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNewFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppAllFunctionsByAPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFunClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFunctionOrderNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildFunctionByParentFunIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParentFunctionByAPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppFunctionPagesByAPIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNewPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetButtonsByPageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadPageByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllButtonOperationCompleted;
        
        private System.Threading.SendOrPostCallback btnCodeToBIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetGroupAppFunctionPermission1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SetGroupAppFunctionPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPortalSystemAuthKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback APLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLoginCurrentAuthApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAPAuthInvalidOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAuthIsValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAPAuthOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsAppFunctions() {
            this.Url = global::SimpleTest.Properties.Settings.Default.SimpleTest_PortalReference_wsAppFunctions;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllApplicationCompletedEventHandler GetAllApplicationCompleted;
        
        /// <remarks/>
        public event LoadApplicationByKeyCompletedEventHandler LoadApplicationByKeyCompleted;
        
        /// <remarks/>
        public event InsertNewApplicationCompletedEventHandler InsertNewApplicationCompleted;
        
        /// <remarks/>
        public event GetUserGroupPermissionApplicationsCompletedEventHandler GetUserGroupPermissionApplicationsCompleted;
        
        /// <remarks/>
        public event IsHasPermissionUseAPCompletedEventHandler IsHasPermissionUseAPCompleted;
        
        /// <remarks/>
        public event GetAIDbyAPCodeCompletedEventHandler GetAIDbyAPCodeCompleted;
        
        /// <remarks/>
        public event isAPCodeUsedCompletedEventHandler isAPCodeUsedCompleted;
        
        /// <remarks/>
        public event InsertNewFunClassCompletedEventHandler InsertNewFunClassCompleted;
        
        /// <remarks/>
        public event LoadFunctionByKeyCompletedEventHandler LoadFunctionByKeyCompleted;
        
        /// <remarks/>
        public event InsertNewFunctionCompletedEventHandler InsertNewFunctionCompleted;
        
        /// <remarks/>
        public event GetAppAllFunctionsByAPIDCompletedEventHandler GetAppAllFunctionsByAPIDCompleted;
        
        /// <remarks/>
        public event UpdateFunctionCompletedEventHandler UpdateFunctionCompleted;
        
        /// <remarks/>
        public event UpdateFunClassCompletedEventHandler UpdateFunClassCompleted;
        
        /// <remarks/>
        public event UpdateFunctionOrderNoCompletedEventHandler UpdateFunctionOrderNoCompleted;
        
        /// <remarks/>
        public event GetChildFunctionByParentFunIDCompletedEventHandler GetChildFunctionByParentFunIDCompleted;
        
        /// <remarks/>
        public event GetParentFunctionByAPIDCompletedEventHandler GetParentFunctionByAPIDCompleted;
        
        /// <remarks/>
        public event GetAppFunctionPagesByAPIDCompletedEventHandler GetAppFunctionPagesByAPIDCompleted;
        
        /// <remarks/>
        public event InsertNewPageCompletedEventHandler InsertNewPageCompleted;
        
        /// <remarks/>
        public event GetPagesCompletedEventHandler GetPagesCompleted;
        
        /// <remarks/>
        public event GetButtonsByPageIDCompletedEventHandler GetButtonsByPageIDCompleted;
        
        /// <remarks/>
        public event LoadPageByKeyCompletedEventHandler LoadPageByKeyCompleted;
        
        /// <remarks/>
        public event UpdatePageCompletedEventHandler UpdatePageCompleted;
        
        /// <remarks/>
        public event LoadAllButtonCompletedEventHandler LoadAllButtonCompleted;
        
        /// <remarks/>
        public event btnCodeToBIDCompletedEventHandler btnCodeToBIDCompleted;
        
        /// <remarks/>
        public event SetGroupAppFunctionPermission1CompletedEventHandler SetGroupAppFunctionPermission1Completed;
        
        /// <remarks/>
        public event SetGroupAppFunctionPermissionCompletedEventHandler SetGroupAppFunctionPermissionCompleted;
        
        /// <remarks/>
        public event GetUserPortalSystemAuthKeyCompletedEventHandler GetUserPortalSystemAuthKeyCompleted;
        
        /// <remarks/>
        public event APLoginCompletedEventHandler APLoginCompleted;
        
        /// <remarks/>
        public event GetUserLoginCurrentAuthApplicationCompletedEventHandler GetUserLoginCurrentAuthApplicationCompleted;
        
        /// <remarks/>
        public event UpdateAPAuthInvalidCompletedEventHandler UpdateAPAuthInvalidCompleted;
        
        /// <remarks/>
        public event CheckAuthIsValidCompletedEventHandler CheckAuthIsValidCompleted;
        
        /// <remarks/>
        public event CancelAPAuthCompletedEventHandler CancelAPAuthCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllApplication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllApplication() {
            object[] results = this.Invoke("GetAllApplication", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllApplicationAsync() {
            this.GetAllApplicationAsync(null);
        }
        
        /// <remarks/>
        public void GetAllApplicationAsync(object userState) {
            if ((this.GetAllApplicationOperationCompleted == null)) {
                this.GetAllApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllApplicationOperationCompleted);
            }
            this.InvokeAsync("GetAllApplication", new object[0], this.GetAllApplicationOperationCompleted, userState);
        }
        
        private void OnGetAllApplicationOperationCompleted(object arg) {
            if ((this.GetAllApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllApplicationCompleted(this, new GetAllApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadApplicationByKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadApplicationByKey(string sAID) {
            object[] results = this.Invoke("LoadApplicationByKey", new object[] {
                        sAID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadApplicationByKeyAsync(string sAID) {
            this.LoadApplicationByKeyAsync(sAID, null);
        }
        
        /// <remarks/>
        public void LoadApplicationByKeyAsync(string sAID, object userState) {
            if ((this.LoadApplicationByKeyOperationCompleted == null)) {
                this.LoadApplicationByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadApplicationByKeyOperationCompleted);
            }
            this.InvokeAsync("LoadApplicationByKey", new object[] {
                        sAID}, this.LoadApplicationByKeyOperationCompleted, userState);
        }
        
        private void OnLoadApplicationByKeyOperationCompleted(object arg) {
            if ((this.LoadApplicationByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadApplicationByKeyCompleted(this, new LoadApplicationByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertNewApplication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertNewApplication(string sAppName, string sAPCode, string sEntryPage, string sLogoutPage, string sDescription) {
            object[] results = this.Invoke("InsertNewApplication", new object[] {
                        sAppName,
                        sAPCode,
                        sEntryPage,
                        sLogoutPage,
                        sDescription});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNewApplicationAsync(string sAppName, string sAPCode, string sEntryPage, string sLogoutPage, string sDescription) {
            this.InsertNewApplicationAsync(sAppName, sAPCode, sEntryPage, sLogoutPage, sDescription, null);
        }
        
        /// <remarks/>
        public void InsertNewApplicationAsync(string sAppName, string sAPCode, string sEntryPage, string sLogoutPage, string sDescription, object userState) {
            if ((this.InsertNewApplicationOperationCompleted == null)) {
                this.InsertNewApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNewApplicationOperationCompleted);
            }
            this.InvokeAsync("InsertNewApplication", new object[] {
                        sAppName,
                        sAPCode,
                        sEntryPage,
                        sLogoutPage,
                        sDescription}, this.InsertNewApplicationOperationCompleted, userState);
        }
        
        private void OnInsertNewApplicationOperationCompleted(object arg) {
            if ((this.InsertNewApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNewApplicationCompleted(this, new InsertNewApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupPermissionApplications", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserGroupPermissionApplications(int iUID) {
            object[] results = this.Invoke("GetUserGroupPermissionApplications", new object[] {
                        iUID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserGroupPermissionApplicationsAsync(int iUID) {
            this.GetUserGroupPermissionApplicationsAsync(iUID, null);
        }
        
        /// <remarks/>
        public void GetUserGroupPermissionApplicationsAsync(int iUID, object userState) {
            if ((this.GetUserGroupPermissionApplicationsOperationCompleted == null)) {
                this.GetUserGroupPermissionApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupPermissionApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetUserGroupPermissionApplications", new object[] {
                        iUID}, this.GetUserGroupPermissionApplicationsOperationCompleted, userState);
        }
        
        private void OnGetUserGroupPermissionApplicationsOperationCompleted(object arg) {
            if ((this.GetUserGroupPermissionApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserGroupPermissionApplicationsCompleted(this, new GetUserGroupPermissionApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsHasPermissionUseAP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsHasPermissionUseAP(string sAPCode, int iUID) {
            object[] results = this.Invoke("IsHasPermissionUseAP", new object[] {
                        sAPCode,
                        iUID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsHasPermissionUseAPAsync(string sAPCode, int iUID) {
            this.IsHasPermissionUseAPAsync(sAPCode, iUID, null);
        }
        
        /// <remarks/>
        public void IsHasPermissionUseAPAsync(string sAPCode, int iUID, object userState) {
            if ((this.IsHasPermissionUseAPOperationCompleted == null)) {
                this.IsHasPermissionUseAPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsHasPermissionUseAPOperationCompleted);
            }
            this.InvokeAsync("IsHasPermissionUseAP", new object[] {
                        sAPCode,
                        iUID}, this.IsHasPermissionUseAPOperationCompleted, userState);
        }
        
        private void OnIsHasPermissionUseAPOperationCompleted(object arg) {
            if ((this.IsHasPermissionUseAPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsHasPermissionUseAPCompleted(this, new IsHasPermissionUseAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAIDbyAPCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAIDbyAPCode(string sAPCode) {
            object[] results = this.Invoke("GetAIDbyAPCode", new object[] {
                        sAPCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAIDbyAPCodeAsync(string sAPCode) {
            this.GetAIDbyAPCodeAsync(sAPCode, null);
        }
        
        /// <remarks/>
        public void GetAIDbyAPCodeAsync(string sAPCode, object userState) {
            if ((this.GetAIDbyAPCodeOperationCompleted == null)) {
                this.GetAIDbyAPCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAIDbyAPCodeOperationCompleted);
            }
            this.InvokeAsync("GetAIDbyAPCode", new object[] {
                        sAPCode}, this.GetAIDbyAPCodeOperationCompleted, userState);
        }
        
        private void OnGetAIDbyAPCodeOperationCompleted(object arg) {
            if ((this.GetAIDbyAPCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAIDbyAPCodeCompleted(this, new GetAIDbyAPCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isAPCodeUsed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isAPCodeUsed(string sAPCode) {
            object[] results = this.Invoke("isAPCodeUsed", new object[] {
                        sAPCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isAPCodeUsedAsync(string sAPCode) {
            this.isAPCodeUsedAsync(sAPCode, null);
        }
        
        /// <remarks/>
        public void isAPCodeUsedAsync(string sAPCode, object userState) {
            if ((this.isAPCodeUsedOperationCompleted == null)) {
                this.isAPCodeUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisAPCodeUsedOperationCompleted);
            }
            this.InvokeAsync("isAPCodeUsed", new object[] {
                        sAPCode}, this.isAPCodeUsedOperationCompleted, userState);
        }
        
        private void OnisAPCodeUsedOperationCompleted(object arg) {
            if ((this.isAPCodeUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isAPCodeUsedCompleted(this, new isAPCodeUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertNewFunClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertNewFunClass(string sFunName, string sDescription, bool isVisible, int iAID) {
            object[] results = this.Invoke("InsertNewFunClass", new object[] {
                        sFunName,
                        sDescription,
                        isVisible,
                        iAID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNewFunClassAsync(string sFunName, string sDescription, bool isVisible, int iAID) {
            this.InsertNewFunClassAsync(sFunName, sDescription, isVisible, iAID, null);
        }
        
        /// <remarks/>
        public void InsertNewFunClassAsync(string sFunName, string sDescription, bool isVisible, int iAID, object userState) {
            if ((this.InsertNewFunClassOperationCompleted == null)) {
                this.InsertNewFunClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNewFunClassOperationCompleted);
            }
            this.InvokeAsync("InsertNewFunClass", new object[] {
                        sFunName,
                        sDescription,
                        isVisible,
                        iAID}, this.InsertNewFunClassOperationCompleted, userState);
        }
        
        private void OnInsertNewFunClassOperationCompleted(object arg) {
            if ((this.InsertNewFunClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNewFunClassCompleted(this, new InsertNewFunClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFunctionByKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadFunctionByKey(int iPKey) {
            object[] results = this.Invoke("LoadFunctionByKey", new object[] {
                        iPKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadFunctionByKeyAsync(int iPKey) {
            this.LoadFunctionByKeyAsync(iPKey, null);
        }
        
        /// <remarks/>
        public void LoadFunctionByKeyAsync(int iPKey, object userState) {
            if ((this.LoadFunctionByKeyOperationCompleted == null)) {
                this.LoadFunctionByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFunctionByKeyOperationCompleted);
            }
            this.InvokeAsync("LoadFunctionByKey", new object[] {
                        iPKey}, this.LoadFunctionByKeyOperationCompleted, userState);
        }
        
        private void OnLoadFunctionByKeyOperationCompleted(object arg) {
            if ((this.LoadFunctionByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFunctionByKeyCompleted(this, new LoadFunctionByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertNewFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertNewFunction(string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, int iAID, string sTarget) {
            object[] results = this.Invoke("InsertNewFunction", new object[] {
                        sFunName,
                        sDescription,
                        bIsVisible,
                        sHref,
                        iPFID,
                        iAID,
                        sTarget});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNewFunctionAsync(string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, int iAID, string sTarget) {
            this.InsertNewFunctionAsync(sFunName, sDescription, bIsVisible, sHref, iPFID, iAID, sTarget, null);
        }
        
        /// <remarks/>
        public void InsertNewFunctionAsync(string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, int iAID, string sTarget, object userState) {
            if ((this.InsertNewFunctionOperationCompleted == null)) {
                this.InsertNewFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNewFunctionOperationCompleted);
            }
            this.InvokeAsync("InsertNewFunction", new object[] {
                        sFunName,
                        sDescription,
                        bIsVisible,
                        sHref,
                        iPFID,
                        iAID,
                        sTarget}, this.InsertNewFunctionOperationCompleted, userState);
        }
        
        private void OnInsertNewFunctionOperationCompleted(object arg) {
            if ((this.InsertNewFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNewFunctionCompleted(this, new InsertNewFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppAllFunctionsByAPID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAppAllFunctionsByAPID(string sAID) {
            object[] results = this.Invoke("GetAppAllFunctionsByAPID", new object[] {
                        sAID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppAllFunctionsByAPIDAsync(string sAID) {
            this.GetAppAllFunctionsByAPIDAsync(sAID, null);
        }
        
        /// <remarks/>
        public void GetAppAllFunctionsByAPIDAsync(string sAID, object userState) {
            if ((this.GetAppAllFunctionsByAPIDOperationCompleted == null)) {
                this.GetAppAllFunctionsByAPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppAllFunctionsByAPIDOperationCompleted);
            }
            this.InvokeAsync("GetAppAllFunctionsByAPID", new object[] {
                        sAID}, this.GetAppAllFunctionsByAPIDOperationCompleted, userState);
        }
        
        private void OnGetAppAllFunctionsByAPIDOperationCompleted(object arg) {
            if ((this.GetAppAllFunctionsByAPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppAllFunctionsByAPIDCompleted(this, new GetAppAllFunctionsByAPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFunction(int iFID, string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, string sTarget) {
            this.Invoke("UpdateFunction", new object[] {
                        iFID,
                        sFunName,
                        sDescription,
                        bIsVisible,
                        sHref,
                        iPFID,
                        sTarget});
        }
        
        /// <remarks/>
        public void UpdateFunctionAsync(int iFID, string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, string sTarget) {
            this.UpdateFunctionAsync(iFID, sFunName, sDescription, bIsVisible, sHref, iPFID, sTarget, null);
        }
        
        /// <remarks/>
        public void UpdateFunctionAsync(int iFID, string sFunName, string sDescription, bool bIsVisible, string sHref, int iPFID, string sTarget, object userState) {
            if ((this.UpdateFunctionOperationCompleted == null)) {
                this.UpdateFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFunctionOperationCompleted);
            }
            this.InvokeAsync("UpdateFunction", new object[] {
                        iFID,
                        sFunName,
                        sDescription,
                        bIsVisible,
                        sHref,
                        iPFID,
                        sTarget}, this.UpdateFunctionOperationCompleted, userState);
        }
        
        private void OnUpdateFunctionOperationCompleted(object arg) {
            if ((this.UpdateFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFunctionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFunClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFunClass(int iFID, string sFunName, string sDescription, bool bIsVisible) {
            this.Invoke("UpdateFunClass", new object[] {
                        iFID,
                        sFunName,
                        sDescription,
                        bIsVisible});
        }
        
        /// <remarks/>
        public void UpdateFunClassAsync(int iFID, string sFunName, string sDescription, bool bIsVisible) {
            this.UpdateFunClassAsync(iFID, sFunName, sDescription, bIsVisible, null);
        }
        
        /// <remarks/>
        public void UpdateFunClassAsync(int iFID, string sFunName, string sDescription, bool bIsVisible, object userState) {
            if ((this.UpdateFunClassOperationCompleted == null)) {
                this.UpdateFunClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFunClassOperationCompleted);
            }
            this.InvokeAsync("UpdateFunClass", new object[] {
                        iFID,
                        sFunName,
                        sDescription,
                        bIsVisible}, this.UpdateFunClassOperationCompleted, userState);
        }
        
        private void OnUpdateFunClassOperationCompleted(object arg) {
            if ((this.UpdateFunClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFunClassCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFunctionOrderNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFunctionOrderNo(string[] arysOrder) {
            this.Invoke("UpdateFunctionOrderNo", new object[] {
                        arysOrder});
        }
        
        /// <remarks/>
        public void UpdateFunctionOrderNoAsync(string[] arysOrder) {
            this.UpdateFunctionOrderNoAsync(arysOrder, null);
        }
        
        /// <remarks/>
        public void UpdateFunctionOrderNoAsync(string[] arysOrder, object userState) {
            if ((this.UpdateFunctionOrderNoOperationCompleted == null)) {
                this.UpdateFunctionOrderNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFunctionOrderNoOperationCompleted);
            }
            this.InvokeAsync("UpdateFunctionOrderNo", new object[] {
                        arysOrder}, this.UpdateFunctionOrderNoOperationCompleted, userState);
        }
        
        private void OnUpdateFunctionOrderNoOperationCompleted(object arg) {
            if ((this.UpdateFunctionOrderNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFunctionOrderNoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChildFunctionByParentFunID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetChildFunctionByParentFunID(int iPFID) {
            object[] results = this.Invoke("GetChildFunctionByParentFunID", new object[] {
                        iPFID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildFunctionByParentFunIDAsync(int iPFID) {
            this.GetChildFunctionByParentFunIDAsync(iPFID, null);
        }
        
        /// <remarks/>
        public void GetChildFunctionByParentFunIDAsync(int iPFID, object userState) {
            if ((this.GetChildFunctionByParentFunIDOperationCompleted == null)) {
                this.GetChildFunctionByParentFunIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildFunctionByParentFunIDOperationCompleted);
            }
            this.InvokeAsync("GetChildFunctionByParentFunID", new object[] {
                        iPFID}, this.GetChildFunctionByParentFunIDOperationCompleted, userState);
        }
        
        private void OnGetChildFunctionByParentFunIDOperationCompleted(object arg) {
            if ((this.GetChildFunctionByParentFunIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildFunctionByParentFunIDCompleted(this, new GetChildFunctionByParentFunIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParentFunctionByAPID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetParentFunctionByAPID(string sAID) {
            object[] results = this.Invoke("GetParentFunctionByAPID", new object[] {
                        sAID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetParentFunctionByAPIDAsync(string sAID) {
            this.GetParentFunctionByAPIDAsync(sAID, null);
        }
        
        /// <remarks/>
        public void GetParentFunctionByAPIDAsync(string sAID, object userState) {
            if ((this.GetParentFunctionByAPIDOperationCompleted == null)) {
                this.GetParentFunctionByAPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentFunctionByAPIDOperationCompleted);
            }
            this.InvokeAsync("GetParentFunctionByAPID", new object[] {
                        sAID}, this.GetParentFunctionByAPIDOperationCompleted, userState);
        }
        
        private void OnGetParentFunctionByAPIDOperationCompleted(object arg) {
            if ((this.GetParentFunctionByAPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentFunctionByAPIDCompleted(this, new GetParentFunctionByAPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppFunctionPagesByAPID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAppFunctionPagesByAPID(int iAID) {
            object[] results = this.Invoke("GetAppFunctionPagesByAPID", new object[] {
                        iAID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppFunctionPagesByAPIDAsync(int iAID) {
            this.GetAppFunctionPagesByAPIDAsync(iAID, null);
        }
        
        /// <remarks/>
        public void GetAppFunctionPagesByAPIDAsync(int iAID, object userState) {
            if ((this.GetAppFunctionPagesByAPIDOperationCompleted == null)) {
                this.GetAppFunctionPagesByAPIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppFunctionPagesByAPIDOperationCompleted);
            }
            this.InvokeAsync("GetAppFunctionPagesByAPID", new object[] {
                        iAID}, this.GetAppFunctionPagesByAPIDOperationCompleted, userState);
        }
        
        private void OnGetAppFunctionPagesByAPIDOperationCompleted(object arg) {
            if ((this.GetAppFunctionPagesByAPIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppFunctionPagesByAPIDCompleted(this, new GetAppFunctionPagesByAPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertNewPage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertNewPage(string sName, string sHref, int iFID, string[] arysButtons) {
            this.Invoke("InsertNewPage", new object[] {
                        sName,
                        sHref,
                        iFID,
                        arysButtons});
        }
        
        /// <remarks/>
        public void InsertNewPageAsync(string sName, string sHref, int iFID, string[] arysButtons) {
            this.InsertNewPageAsync(sName, sHref, iFID, arysButtons, null);
        }
        
        /// <remarks/>
        public void InsertNewPageAsync(string sName, string sHref, int iFID, string[] arysButtons, object userState) {
            if ((this.InsertNewPageOperationCompleted == null)) {
                this.InsertNewPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNewPageOperationCompleted);
            }
            this.InvokeAsync("InsertNewPage", new object[] {
                        sName,
                        sHref,
                        iFID,
                        arysButtons}, this.InsertNewPageOperationCompleted, userState);
        }
        
        private void OnInsertNewPageOperationCompleted(object arg) {
            if ((this.InsertNewPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNewPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPages(int iFID) {
            object[] results = this.Invoke("GetPages", new object[] {
                        iFID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPagesAsync(int iFID) {
            this.GetPagesAsync(iFID, null);
        }
        
        /// <remarks/>
        public void GetPagesAsync(int iFID, object userState) {
            if ((this.GetPagesOperationCompleted == null)) {
                this.GetPagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPagesOperationCompleted);
            }
            this.InvokeAsync("GetPages", new object[] {
                        iFID}, this.GetPagesOperationCompleted, userState);
        }
        
        private void OnGetPagesOperationCompleted(object arg) {
            if ((this.GetPagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPagesCompleted(this, new GetPagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetButtonsByPageID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetButtonsByPageID(int iPMID) {
            object[] results = this.Invoke("GetButtonsByPageID", new object[] {
                        iPMID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetButtonsByPageIDAsync(int iPMID) {
            this.GetButtonsByPageIDAsync(iPMID, null);
        }
        
        /// <remarks/>
        public void GetButtonsByPageIDAsync(int iPMID, object userState) {
            if ((this.GetButtonsByPageIDOperationCompleted == null)) {
                this.GetButtonsByPageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetButtonsByPageIDOperationCompleted);
            }
            this.InvokeAsync("GetButtonsByPageID", new object[] {
                        iPMID}, this.GetButtonsByPageIDOperationCompleted, userState);
        }
        
        private void OnGetButtonsByPageIDOperationCompleted(object arg) {
            if ((this.GetButtonsByPageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetButtonsByPageIDCompleted(this, new GetButtonsByPageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadPageByKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadPageByKey(int iPMID) {
            object[] results = this.Invoke("LoadPageByKey", new object[] {
                        iPMID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadPageByKeyAsync(int iPMID) {
            this.LoadPageByKeyAsync(iPMID, null);
        }
        
        /// <remarks/>
        public void LoadPageByKeyAsync(int iPMID, object userState) {
            if ((this.LoadPageByKeyOperationCompleted == null)) {
                this.LoadPageByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadPageByKeyOperationCompleted);
            }
            this.InvokeAsync("LoadPageByKey", new object[] {
                        iPMID}, this.LoadPageByKeyOperationCompleted, userState);
        }
        
        private void OnLoadPageByKeyOperationCompleted(object arg) {
            if ((this.LoadPageByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadPageByKeyCompleted(this, new LoadPageByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePage(int iPMID, string sName, string sHref, bool bIsVisible, string[] arysButtons) {
            this.Invoke("UpdatePage", new object[] {
                        iPMID,
                        sName,
                        sHref,
                        bIsVisible,
                        arysButtons});
        }
        
        /// <remarks/>
        public void UpdatePageAsync(int iPMID, string sName, string sHref, bool bIsVisible, string[] arysButtons) {
            this.UpdatePageAsync(iPMID, sName, sHref, bIsVisible, arysButtons, null);
        }
        
        /// <remarks/>
        public void UpdatePageAsync(int iPMID, string sName, string sHref, bool bIsVisible, string[] arysButtons, object userState) {
            if ((this.UpdatePageOperationCompleted == null)) {
                this.UpdatePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePageOperationCompleted);
            }
            this.InvokeAsync("UpdatePage", new object[] {
                        iPMID,
                        sName,
                        sHref,
                        bIsVisible,
                        arysButtons}, this.UpdatePageOperationCompleted, userState);
        }
        
        private void OnUpdatePageOperationCompleted(object arg) {
            if ((this.UpdatePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadAllButton", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadAllButton() {
            object[] results = this.Invoke("LoadAllButton", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllButtonAsync() {
            this.LoadAllButtonAsync(null);
        }
        
        /// <remarks/>
        public void LoadAllButtonAsync(object userState) {
            if ((this.LoadAllButtonOperationCompleted == null)) {
                this.LoadAllButtonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllButtonOperationCompleted);
            }
            this.InvokeAsync("LoadAllButton", new object[0], this.LoadAllButtonOperationCompleted, userState);
        }
        
        private void OnLoadAllButtonOperationCompleted(object arg) {
            if ((this.LoadAllButtonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllButtonCompleted(this, new LoadAllButtonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/btnCodeToBID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] btnCodeToBID(string sBtnCode) {
            object[] results = this.Invoke("btnCodeToBID", new object[] {
                        sBtnCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void btnCodeToBIDAsync(string sBtnCode) {
            this.btnCodeToBIDAsync(sBtnCode, null);
        }
        
        /// <remarks/>
        public void btnCodeToBIDAsync(string sBtnCode, object userState) {
            if ((this.btnCodeToBIDOperationCompleted == null)) {
                this.btnCodeToBIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbtnCodeToBIDOperationCompleted);
            }
            this.InvokeAsync("btnCodeToBID", new object[] {
                        sBtnCode}, this.btnCodeToBIDOperationCompleted, userState);
        }
        
        private void OnbtnCodeToBIDOperationCompleted(object arg) {
            if ((this.btnCodeToBIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.btnCodeToBIDCompleted(this, new btnCodeToBIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetGroupAppFunctionPermission1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetGroupAppFunctionPermission1(int iGID, int iAID, System.Data.DataSet dsPages) {
            this.Invoke("SetGroupAppFunctionPermission1", new object[] {
                        iGID,
                        iAID,
                        dsPages});
        }
        
        /// <remarks/>
        public void SetGroupAppFunctionPermission1Async(int iGID, int iAID, System.Data.DataSet dsPages) {
            this.SetGroupAppFunctionPermission1Async(iGID, iAID, dsPages, null);
        }
        
        /// <remarks/>
        public void SetGroupAppFunctionPermission1Async(int iGID, int iAID, System.Data.DataSet dsPages, object userState) {
            if ((this.SetGroupAppFunctionPermission1OperationCompleted == null)) {
                this.SetGroupAppFunctionPermission1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetGroupAppFunctionPermission1OperationCompleted);
            }
            this.InvokeAsync("SetGroupAppFunctionPermission1", new object[] {
                        iGID,
                        iAID,
                        dsPages}, this.SetGroupAppFunctionPermission1OperationCompleted, userState);
        }
        
        private void OnSetGroupAppFunctionPermission1OperationCompleted(object arg) {
            if ((this.SetGroupAppFunctionPermission1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetGroupAppFunctionPermission1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetGroupAppFunctionPermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetGroupAppFunctionPermission(int iGID, int iAID, System.Data.DataSet dsPages) {
            this.Invoke("SetGroupAppFunctionPermission", new object[] {
                        iGID,
                        iAID,
                        dsPages});
        }
        
        /// <remarks/>
        public void SetGroupAppFunctionPermissionAsync(int iGID, int iAID, System.Data.DataSet dsPages) {
            this.SetGroupAppFunctionPermissionAsync(iGID, iAID, dsPages, null);
        }
        
        /// <remarks/>
        public void SetGroupAppFunctionPermissionAsync(int iGID, int iAID, System.Data.DataSet dsPages, object userState) {
            if ((this.SetGroupAppFunctionPermissionOperationCompleted == null)) {
                this.SetGroupAppFunctionPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetGroupAppFunctionPermissionOperationCompleted);
            }
            this.InvokeAsync("SetGroupAppFunctionPermission", new object[] {
                        iGID,
                        iAID,
                        dsPages}, this.SetGroupAppFunctionPermissionOperationCompleted, userState);
        }
        
        private void OnSetGroupAppFunctionPermissionOperationCompleted(object arg) {
            if ((this.SetGroupAppFunctionPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetGroupAppFunctionPermissionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserPortalSystemAuthKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserPortalSystemAuthKey(string sAPCode, int iUID) {
            object[] results = this.Invoke("GetUserPortalSystemAuthKey", new object[] {
                        sAPCode,
                        iUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPortalSystemAuthKeyAsync(string sAPCode, int iUID) {
            this.GetUserPortalSystemAuthKeyAsync(sAPCode, iUID, null);
        }
        
        /// <remarks/>
        public void GetUserPortalSystemAuthKeyAsync(string sAPCode, int iUID, object userState) {
            if ((this.GetUserPortalSystemAuthKeyOperationCompleted == null)) {
                this.GetUserPortalSystemAuthKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPortalSystemAuthKeyOperationCompleted);
            }
            this.InvokeAsync("GetUserPortalSystemAuthKey", new object[] {
                        sAPCode,
                        iUID}, this.GetUserPortalSystemAuthKeyOperationCompleted, userState);
        }
        
        private void OnGetUserPortalSystemAuthKeyOperationCompleted(object arg) {
            if ((this.GetUserPortalSystemAuthKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPortalSystemAuthKeyCompleted(this, new GetUserPortalSystemAuthKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/APLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet APLogin(string sAuthKey, string sAPCode) {
            object[] results = this.Invoke("APLogin", new object[] {
                        sAuthKey,
                        sAPCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void APLoginAsync(string sAuthKey, string sAPCode) {
            this.APLoginAsync(sAuthKey, sAPCode, null);
        }
        
        /// <remarks/>
        public void APLoginAsync(string sAuthKey, string sAPCode, object userState) {
            if ((this.APLoginOperationCompleted == null)) {
                this.APLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAPLoginOperationCompleted);
            }
            this.InvokeAsync("APLogin", new object[] {
                        sAuthKey,
                        sAPCode}, this.APLoginOperationCompleted, userState);
        }
        
        private void OnAPLoginOperationCompleted(object arg) {
            if ((this.APLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.APLoginCompleted(this, new APLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserLoginCurrentAuthApplication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserLoginCurrentAuthApplication(int iUID) {
            object[] results = this.Invoke("GetUserLoginCurrentAuthApplication", new object[] {
                        iUID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLoginCurrentAuthApplicationAsync(int iUID) {
            this.GetUserLoginCurrentAuthApplicationAsync(iUID, null);
        }
        
        /// <remarks/>
        public void GetUserLoginCurrentAuthApplicationAsync(int iUID, object userState) {
            if ((this.GetUserLoginCurrentAuthApplicationOperationCompleted == null)) {
                this.GetUserLoginCurrentAuthApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLoginCurrentAuthApplicationOperationCompleted);
            }
            this.InvokeAsync("GetUserLoginCurrentAuthApplication", new object[] {
                        iUID}, this.GetUserLoginCurrentAuthApplicationOperationCompleted, userState);
        }
        
        private void OnGetUserLoginCurrentAuthApplicationOperationCompleted(object arg) {
            if ((this.GetUserLoginCurrentAuthApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLoginCurrentAuthApplicationCompleted(this, new GetUserLoginCurrentAuthApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAPAuthInvalid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAPAuthInvalid(string sAuthKey, string sAPCode) {
            this.Invoke("UpdateAPAuthInvalid", new object[] {
                        sAuthKey,
                        sAPCode});
        }
        
        /// <remarks/>
        public void UpdateAPAuthInvalidAsync(string sAuthKey, string sAPCode) {
            this.UpdateAPAuthInvalidAsync(sAuthKey, sAPCode, null);
        }
        
        /// <remarks/>
        public void UpdateAPAuthInvalidAsync(string sAuthKey, string sAPCode, object userState) {
            if ((this.UpdateAPAuthInvalidOperationCompleted == null)) {
                this.UpdateAPAuthInvalidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAPAuthInvalidOperationCompleted);
            }
            this.InvokeAsync("UpdateAPAuthInvalid", new object[] {
                        sAuthKey,
                        sAPCode}, this.UpdateAPAuthInvalidOperationCompleted, userState);
        }
        
        private void OnUpdateAPAuthInvalidOperationCompleted(object arg) {
            if ((this.UpdateAPAuthInvalidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAPAuthInvalidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAuthIsValid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAuthIsValid(string sAuthKey, string sAPCode) {
            object[] results = this.Invoke("CheckAuthIsValid", new object[] {
                        sAuthKey,
                        sAPCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAuthIsValidAsync(string sAuthKey, string sAPCode) {
            this.CheckAuthIsValidAsync(sAuthKey, sAPCode, null);
        }
        
        /// <remarks/>
        public void CheckAuthIsValidAsync(string sAuthKey, string sAPCode, object userState) {
            if ((this.CheckAuthIsValidOperationCompleted == null)) {
                this.CheckAuthIsValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAuthIsValidOperationCompleted);
            }
            this.InvokeAsync("CheckAuthIsValid", new object[] {
                        sAuthKey,
                        sAPCode}, this.CheckAuthIsValidOperationCompleted, userState);
        }
        
        private void OnCheckAuthIsValidOperationCompleted(object arg) {
            if ((this.CheckAuthIsValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAuthIsValidCompleted(this, new CheckAuthIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelAPAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelAPAuth(int iUID) {
            this.Invoke("CancelAPAuth", new object[] {
                        iUID});
        }
        
        /// <remarks/>
        public void CancelAPAuthAsync(int iUID) {
            this.CancelAPAuthAsync(iUID, null);
        }
        
        /// <remarks/>
        public void CancelAPAuthAsync(int iUID, object userState) {
            if ((this.CancelAPAuthOperationCompleted == null)) {
                this.CancelAPAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAPAuthOperationCompleted);
            }
            this.InvokeAsync("CancelAPAuth", new object[] {
                        iUID}, this.CancelAPAuthOperationCompleted, userState);
        }
        
        private void OnCancelAPAuthOperationCompleted(object arg) {
            if ((this.CancelAPAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAPAuthCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllApplicationCompletedEventHandler(object sender, GetAllApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadApplicationByKeyCompletedEventHandler(object sender, LoadApplicationByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadApplicationByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadApplicationByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertNewApplicationCompletedEventHandler(object sender, InsertNewApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNewApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNewApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserGroupPermissionApplicationsCompletedEventHandler(object sender, GetUserGroupPermissionApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserGroupPermissionApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserGroupPermissionApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IsHasPermissionUseAPCompletedEventHandler(object sender, IsHasPermissionUseAPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsHasPermissionUseAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsHasPermissionUseAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAIDbyAPCodeCompletedEventHandler(object sender, GetAIDbyAPCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAIDbyAPCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAIDbyAPCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void isAPCodeUsedCompletedEventHandler(object sender, isAPCodeUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isAPCodeUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isAPCodeUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertNewFunClassCompletedEventHandler(object sender, InsertNewFunClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNewFunClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNewFunClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadFunctionByKeyCompletedEventHandler(object sender, LoadFunctionByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFunctionByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadFunctionByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertNewFunctionCompletedEventHandler(object sender, InsertNewFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNewFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNewFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAppAllFunctionsByAPIDCompletedEventHandler(object sender, GetAppAllFunctionsByAPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppAllFunctionsByAPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppAllFunctionsByAPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateFunctionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateFunClassCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateFunctionOrderNoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetChildFunctionByParentFunIDCompletedEventHandler(object sender, GetChildFunctionByParentFunIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildFunctionByParentFunIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildFunctionByParentFunIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetParentFunctionByAPIDCompletedEventHandler(object sender, GetParentFunctionByAPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentFunctionByAPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParentFunctionByAPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAppFunctionPagesByAPIDCompletedEventHandler(object sender, GetAppFunctionPagesByAPIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppFunctionPagesByAPIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppFunctionPagesByAPIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertNewPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPagesCompletedEventHandler(object sender, GetPagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetButtonsByPageIDCompletedEventHandler(object sender, GetButtonsByPageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetButtonsByPageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetButtonsByPageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadPageByKeyCompletedEventHandler(object sender, LoadPageByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadPageByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadPageByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdatePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadAllButtonCompletedEventHandler(object sender, LoadAllButtonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllButtonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllButtonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void btnCodeToBIDCompletedEventHandler(object sender, btnCodeToBIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class btnCodeToBIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal btnCodeToBIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetGroupAppFunctionPermission1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetGroupAppFunctionPermissionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserPortalSystemAuthKeyCompletedEventHandler(object sender, GetUserPortalSystemAuthKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPortalSystemAuthKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPortalSystemAuthKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void APLoginCompletedEventHandler(object sender, APLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class APLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal APLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserLoginCurrentAuthApplicationCompletedEventHandler(object sender, GetUserLoginCurrentAuthApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLoginCurrentAuthApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLoginCurrentAuthApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateAPAuthInvalidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckAuthIsValidCompletedEventHandler(object sender, CheckAuthIsValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAuthIsValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAuthIsValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CancelAPAuthCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591